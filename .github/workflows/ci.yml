name: CI Pipeline

# Temporarily disabled during development
on:
  workflow_dispatch:
# on:
#   push:
#     branches: [main, develop, feature/*]
#   pull_request:
#     branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  APP_MODE: "development"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Install dependencies
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      
      - name: Run ruff
        run: |
          source .venv/bin/activate
          ruff check src/ tests/ --output-format=github
      
      - name: Run black
        run: |
          source .venv/bin/activate
          black --check src/ tests/
        continue-on-error: true
      
      - name: Run isort
        run: |
          source .venv/bin/activate
          isort --check-only src/ tests/
        continue-on-error: true
      
      - name: Run mypy
        run: |
          source .venv/bin/activate
          mypy src/ --ignore-missing-imports
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      - name: Install dependencies
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}
          source .venv/bin/activate
          uv pip install -e ".[dev]"
      
      - name: Run tests with coverage
        env:
          CI: true
          REDIS_URL: redis://localhost:6379/15
        run: |
          source .venv/bin/activate
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=70 \
            --junit-xml=test-results.xml \
            || true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.xml
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install security tools
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}
          source .venv/bin/activate
          uv pip install pip-audit bandit
      
      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          pip-audit || true
        continue-on-error: true
      
      - name: Run bandit
        run: |
          source .venv/bin/activate
          bandit -r src/ -f json -o bandit-report.json || true
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: bandit-report.json

      - name: Generate SBOM
        run: |
          source .venv/bin/activate
          uv pip install cyclonedx-bom
          cyclonedx-py --format json --output-file sbom.json .
        continue-on-error: true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom
          path: sbom.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: biocurator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=development

  check-pr-size:
    name: Check PR Size
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR size
        run: |
          # Get the number of lines changed
          LINES_CHANGED=$(git diff --stat ${{ github.event.pull_request.base.sha }}...${{ github.sha }} | tail -1 | awk '{print $4}')
          
          echo "Lines changed: $LINES_CHANGED"
          
          # Warn if PR is too large
          if [ "$LINES_CHANGED" -gt "500" ]; then
            echo "::warning::PR contains $LINES_CHANGED lines of changes. Consider breaking it into smaller PRs (target: <=500 lines)."
          fi