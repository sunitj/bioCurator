name: CI Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  APP_MODE: "development"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      
      - name: Run ruff
        run: ruff check src/ tests/
      
      - name: Run black
        run: black --check src/ tests/
      
      - name: Run isort
        run: isort --check-only src/ tests/
      
      - name: Run mypy
        run: mypy src/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      
      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=70 \
            --junit-xml=test-results.xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test-results.xml
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety bandit cyclonedx-bom
      
      - name: Run pip-audit
        run: pip-audit -r requirements.txt
      
      - name: Run safety check
        run: safety check -r requirements.txt
        continue-on-error: true  # Don't fail on warnings
      
      - name: Run bandit
        run: bandit -r src/ -f json -o bandit-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: bandit-report.json
      
      - name: Generate SBOM
        run: cyclonedx-py -r -i requirements.txt -o sbom.json --format json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: biocurator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=development

  check-pr-size:
    name: Check PR Size
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check PR size
        run: |
          # Get the number of lines changed
          LINES_CHANGED=$(git diff --stat ${{ github.event.pull_request.base.sha }}...${{ github.sha }} | tail -1 | awk '{print $4}')
          
          echo "Lines changed: $LINES_CHANGED"
          
          # Warn if PR is too large
          if [ "$LINES_CHANGED" -gt "500" ]; then
            echo "::warning::PR contains $LINES_CHANGED lines of changes. Consider breaking it into smaller PRs (target: <=500 lines)."
          fi

  check-model-profiles:
    name: Check Model Profile Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for model profile changes
        run: |
          # Check if model_profiles.yaml was modified
          if git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.sha }} | grep -q "configs/model_profiles.yaml"; then
            echo "::notice::Model profiles have been modified. Please ensure thorough review."
            echo "MODEL_PROFILE_CHANGED=true" >> $GITHUB_ENV
          fi
      
      - name: Add label if model profiles changed
        if: env.MODEL_PROFILE_CHANGED == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: model-profile-change