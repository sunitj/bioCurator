[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project]
name = "biocurator"
version = "0.1.0"
description = "Memory-augmented multi-agent system for scientific literature analysis"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.11"
authors = [
    { name = "Sunit Jain", email = "contact@sunitjain.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "jsonschema>=4.20.0",
    "structlog>=23.2.0",
    "python-json-logger>=2.0.7",
    "prometheus-client>=0.19.0",
    "httpx>=0.25.2",
    "redis>=5.0.1",
    "click>=8.1.7",
    "rich>=13.7.0",
    "tenacity>=8.2.3",
    "cachetools>=5.3.2",
    # Memory system dependencies
    "neo4j>=5.15.0",
    "qdrant-client>=1.7.0",
    "psycopg[binary]>=3.1.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "influxdb-client>=1.38.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "types-redis>=4.6.0.11",
    "types-requests>=2.31.0.10",
    "types-pyyaml>=6.0.12.12",
    "pip-audit>=2.6.3",
    "bandit>=1.7.6",
    "pre-commit>=3.6.0",
    "ipython>=8.19.0",
    "watchdog>=3.0.0",
]

ml = [
    "numpy>=1.26.2",
    "pandas>=2.1.4",
    "scikit-learn>=1.3.2",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
biocurator = "src.main:main"
biocurator-health = "src.health.check:main"

[project.urls]
Homepage = "https://github.com/sunitj/biocurator"
Documentation = "https://github.com/sunitj/biocurator/docs"
Repository = "https://github.com/sunitj/biocurator.git"
Issues = "https://github.com/sunitj/biocurator/issues"

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
follow_imports = "silent"
no_implicit_reexport = true
strict_optional = true
strict_equality = true
check_untyped_defs = true
namespace_packages = true
explicit_package_bases = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=70",
    "--durations=10",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "safety: Safety system tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:structlog.*",
    "ignore::DeprecationWarning:prometheus_client.*",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
]

[tool.uv]
dev-dependencies = []